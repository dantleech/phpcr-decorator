<?php

// autogenerated: Wed, 10 Sep 2014 18:08:53 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR;


class Node implements \IteratorAggregate, \PHPCR\NodeInterface
{
    protected $component;
    protected $decoratorFactory;

    public function __construct(
        \PHPCR\NodeInterface $component,
        \Sulu\Component\PhpcrDecorator\DecoratorFactoryInterface $decoratorFactory
    )
    {
        $this->component = $component;
        $this->decoratorFactory = $decoratorFactory;
    }

    /**
     * {@inheritDoc}
     */
    public function addNode($relPath, $primaryNodeTypeName = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->addNode($relPath, $primaryNodeTypeName));
    }

    /**
     * {@inheritDoc}
     */
    public function addNodeAutoNamed($nameHint = NULL, $primaryNodeTypeName = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->addNodeAutoNamed($nameHint, $primaryNodeTypeName));
    }

    /**
     * {@inheritDoc}
     */
    public function orderBefore($srcChildRelPath, $destChildRelPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->orderBefore($srcChildRelPath, $destChildRelPath));
    }

    /**
     * {@inheritDoc}
     */
    public function rename($newName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->rename($newName));
    }

    /**
     * {@inheritDoc}
     */
    public function setProperty($name, $value, $type = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->setProperty($name, $value, $type));
    }

    /**
     * {@inheritDoc}
     */
    public function getNode($relPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getNode($relPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getNodes($nameFilter = NULL, $typeFilter = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getNodes($nameFilter, $typeFilter));
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeNames($nameFilter = NULL, $typeFilter = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getNodeNames($nameFilter, $typeFilter));
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($relPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getProperty($relPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getPropertyValue($name, $type = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPropertyValue($name, $type));
    }

    /**
     * {@inheritDoc}
     */
    public function getPropertyValueWithDefault($relPath, $defaultValue)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPropertyValueWithDefault($relPath, $defaultValue));
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties($nameFilter = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getProperties($nameFilter));
    }

    /**
     * {@inheritDoc}
     */
    public function getPropertiesValues($nameFilter = NULL, $dereference = true)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPropertiesValues($nameFilter, $dereference));
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimaryItem()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPrimaryItem());
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentifier()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getIdentifier());
    }

    /**
     * {@inheritDoc}
     */
    public function getIndex()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getIndex());
    }

    /**
     * {@inheritDoc}
     */
    public function getReferences($name = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getReferences($name));
    }

    /**
     * {@inheritDoc}
     */
    public function getWeakReferences($name = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getWeakReferences($name));
    }

    /**
     * {@inheritDoc}
     */
    public function hasNode($relPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->hasNode($relPath));
    }

    /**
     * {@inheritDoc}
     */
    public function hasProperty($relPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->hasProperty($relPath));
    }

    /**
     * {@inheritDoc}
     */
    public function hasNodes()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->hasNodes());
    }

    /**
     * {@inheritDoc}
     */
    public function hasProperties()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->hasProperties());
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimaryNodeType()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPrimaryNodeType());
    }

    /**
     * {@inheritDoc}
     */
    public function getMixinNodeTypes()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getMixinNodeTypes());
    }

    /**
     * {@inheritDoc}
     */
    public function isNodeType($nodeTypeName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isNodeType($nodeTypeName));
    }

    /**
     * {@inheritDoc}
     */
    public function setPrimaryType($nodeTypeName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->setPrimaryType($nodeTypeName));
    }

    /**
     * {@inheritDoc}
     */
    public function addMixin($mixinName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->addMixin($mixinName));
    }

    /**
     * {@inheritDoc}
     */
    public function removeMixin($mixinName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeMixin($mixinName));
    }

    /**
     * {@inheritDoc}
     */
    public function setMixins(array $mixinNames)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->setMixins($mixinNames));
    }

    /**
     * {@inheritDoc}
     */
    public function canAddMixin($mixinName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->canAddMixin($mixinName));
    }

    /**
     * {@inheritDoc}
     */
    public function getDefinition()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getDefinition());
    }

    /**
     * {@inheritDoc}
     */
    public function update($srcWorkspace)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->update($srcWorkspace));
    }

    /**
     * {@inheritDoc}
     */
    public function getCorrespondingNodePath($workspaceName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getCorrespondingNodePath($workspaceName));
    }

    /**
     * {@inheritDoc}
     */
    public function getSharedSet()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getSharedSet());
    }

    /**
     * {@inheritDoc}
     */
    public function removeSharedSet()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeSharedSet());
    }

    /**
     * {@inheritDoc}
     */
    public function removeShare()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeShare());
    }

    /**
     * {@inheritDoc}
     */
    public function isCheckedOut()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isCheckedOut());
    }

    /**
     * {@inheritDoc}
     */
    public function isLocked()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isLocked());
    }

    /**
     * {@inheritDoc}
     */
    public function followLifecycleTransition($transition)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->followLifecycleTransition($transition));
    }

    /**
     * {@inheritDoc}
     */
    public function getAllowedLifecycleTransitions()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getAllowedLifecycleTransitions());
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPath());
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getName());
    }

    /**
     * {@inheritDoc}
     */
    public function getAncestor($depth)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getAncestor($depth));
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getParent());
    }

    /**
     * {@inheritDoc}
     */
    public function getDepth()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getDepth());
    }

    /**
     * {@inheritDoc}
     */
    public function getSession()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getSession());
    }

    /**
     * {@inheritDoc}
     */
    public function isNode()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isNode());
    }

    /**
     * {@inheritDoc}
     */
    public function isNew()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isNew());
    }

    /**
     * {@inheritDoc}
     */
    public function isModified()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isModified());
    }

    /**
     * {@inheritDoc}
     */
    public function isSame(\PHPCR\ItemInterface$otherItem)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isSame($otherItem));
    }

    /**
     * {@inheritDoc}
     */
    public function accept(\PHPCR\ItemVisitorInterface$visitor)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->accept($visitor));
    }

    /**
     * {@inheritDoc}
     */
    public function revert()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->revert());
    }

    /**
     * {@inheritDoc}
     */
    public function remove()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->remove());
    }

    public function getIterator()
    {
        throw new \Exception("Iterators not supported on decorated objects (yet)");
    }

}