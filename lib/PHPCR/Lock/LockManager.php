<?php

// autogenerated: Wed, 10 Sep 2014 18:08:53 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR\Lock;


class LockManager implements \IteratorAggregate, \PHPCR\Lock\LockManagerInterface
{
    protected $component;
    protected $decoratorFactory;

    public function __construct(
        \PHPCR\Lock\LockManagerInterface $component,
        \Sulu\Component\PhpcrDecorator\DecoratorFactoryInterface $decoratorFactory
    )
    {
        $this->component = $component;
        $this->decoratorFactory = $decoratorFactory;
    }

    /**
     * {@inheritDoc}
     */
    public function addLockToken($lockToken)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->addLockToken($lockToken));
    }

    /**
     * {@inheritDoc}
     */
    public function getLock($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getLock($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getLockTokens()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getLockTokens());
    }

    /**
     * {@inheritDoc}
     */
    public function holdsLock($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->holdsLock($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function lock($absPath, $isDeep, $isSessionScoped, $timeoutHint = 9223372036854775807, $ownerInfo = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->lock($absPath, $isDeep, $isSessionScoped, $timeoutHint, $ownerInfo));
    }

    /**
     * {@inheritDoc}
     */
    public function lockWithInfo($absPath, \PHPCR\Lock\LockInfoInterface$lockInfo)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->lockWithInfo($absPath, $lockInfo));
    }

    /**
     * {@inheritDoc}
     */
    public function isLocked($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isLocked($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function removeLockToken($lockToken)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeLockToken($lockToken));
    }

    /**
     * {@inheritDoc}
     */
    public function unlock($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->unlock($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function createLockInfo()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createLockInfo());
    }

    public function getIterator()
    {
        throw new \Exception("Iterators not supported on decorated objects (yet)");
    }

}