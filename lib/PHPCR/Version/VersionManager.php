<?php

// autogenerated: Wed, 10 Sep 2014 13:41:17 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR\Version;

use PHPCR\Version\VersionInterface;
use PHPCR\NodeInterface;

class VersionManager implements \PHPCR\Version\VersionManagerInterface
{
    protected $component;
    protected $decoratorFactory;

    public function __construct(
        \PHPCR\Version\VersionManagerInterface $component,
        \Sulu\Component\PhpcrDecorator\DecoratorFactoryInterface $decoratorFactory
    )
    {
        $this->component = $component;
        $this->decoratorFactory = $decoratorFactory;
    }


    /**
     * {@inheritDoc}
     */
    public function isCheckedOut($absPath)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->isCheckedOut($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionHistory($absPath)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->getVersionHistory($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseVersion($absPath)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->getBaseVersion($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function removeVersionHistory($absPath)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->removeVersionHistory($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function restore($removeExisting, $version, $absPath = null)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->restore($removeExisting $version $absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function restoreByLabel($absPath, $versionLabel, $removeExisting)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->restoreByLabel($absPath $versionLabel $removeExisting));
    }

    /**
     * {@inheritDoc}
     */
    public function merge($source, $srcWorkspace = null, $bestEffort = null, $isShallow = false)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->merge($source $srcWorkspace $bestEffort $isShallow));
    }

    /**
     * {@inheritDoc}
     */
    public function doneMerge($absPath, VersionInterface $version)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->doneMerge($absPath $version));
    }

    /**
     * {@inheritDoc}
     */
    public function cancelMerge($absPath, VersionInterface $version)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->cancelMerge($absPath $version));
    }

    /**
     * {@inheritDoc}
     */
    public function createConfiguration($absPath, VersionInterface $baseline)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->createConfiguration($absPath $baseline));
    }

    /**
     * {@inheritDoc}
     */
    public function setActivity(\PHPCR\NodeInterface $activity)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->setActivity($activity));
    }

    /**
     * {@inheritDoc}
     */
    public function getActivity()
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->getActivity());
    }

    /**
     * {@inheritDoc}
     */
    public function createActivity($title)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->createActivity($title));
    }

    /**
     * {@inheritDoc}
     */
    public function removeActivity(\PHPCR\NodeInterface $activityNode)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->removeActivity($activityNode));
    }

}