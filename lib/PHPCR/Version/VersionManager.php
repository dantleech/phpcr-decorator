<?php

// autogenerated: Wed, 10 Sep 2014 18:08:53 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR\Version;


class VersionManager implements \PHPCR\Version\VersionManagerInterface
{
    protected $component;
    protected $decoratorFactory;

    public function __construct(
        \PHPCR\Version\VersionManagerInterface $component,
        \Sulu\Component\PhpcrDecorator\DecoratorFactoryInterface $decoratorFactory
    )
    {
        $this->component = $component;
        $this->decoratorFactory = $decoratorFactory;
    }

    /**
     * {@inheritDoc}
     */
    public function checkin($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->checkin($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function checkout($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->checkout($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function checkpoint($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->checkpoint($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function isCheckedOut($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->isCheckedOut($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionHistory($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getVersionHistory($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseVersion($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getBaseVersion($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function removeVersionHistory($absPath)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeVersionHistory($absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function restore($removeExisting, $version, $absPath = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->restore($removeExisting, $version, $absPath));
    }

    /**
     * {@inheritDoc}
     */
    public function restoreByLabel($absPath, $versionLabel, $removeExisting)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->restoreByLabel($absPath, $versionLabel, $removeExisting));
    }

    /**
     * {@inheritDoc}
     */
    public function merge($source, $srcWorkspace = NULL, $bestEffort = NULL, $isShallow = false)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->merge($source, $srcWorkspace, $bestEffort, $isShallow));
    }

    /**
     * {@inheritDoc}
     */
    public function doneMerge($absPath, \PHPCR\Version\VersionInterface$version)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->doneMerge($absPath, $version));
    }

    /**
     * {@inheritDoc}
     */
    public function cancelMerge($absPath, \PHPCR\Version\VersionInterface$version)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->cancelMerge($absPath, $version));
    }

    /**
     * {@inheritDoc}
     */
    public function createConfiguration($absPath, \PHPCR\Version\VersionInterface$baseline)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createConfiguration($absPath, $baseline));
    }

    /**
     * {@inheritDoc}
     */
    public function setActivity(\PHPCR\NodeInterface$activity)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->setActivity($activity));
    }

    /**
     * {@inheritDoc}
     */
    public function getActivity()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getActivity());
    }

    /**
     * {@inheritDoc}
     */
    public function createActivity($title)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createActivity($title));
    }

    /**
     * {@inheritDoc}
     */
    public function removeActivity(\PHPCR\NodeInterface$activityNode)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->removeActivity($activityNode));
    }

}