<?php

// autogenerated: Wed, 10 Sep 2014 18:08:53 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR\NodeType;


class NodeTypeManager implements \IteratorAggregate, \PHPCR\NodeType\NodeTypeManagerInterface
{
    protected $component;
    protected $decoratorFactory;

    public function __construct(
        \PHPCR\NodeType\NodeTypeManagerInterface $component,
        \Sulu\Component\PhpcrDecorator\DecoratorFactoryInterface $decoratorFactory
    )
    {
        $this->component = $component;
        $this->decoratorFactory = $decoratorFactory;
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeType($nodeTypeName)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getNodeType($nodeTypeName));
    }

    /**
     * {@inheritDoc}
     */
    public function hasNodeType($name)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->hasNodeType($name));
    }

    /**
     * {@inheritDoc}
     */
    public function getAllNodeTypes()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getAllNodeTypes());
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimaryNodeTypes()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getPrimaryNodeTypes());
    }

    /**
     * {@inheritDoc}
     */
    public function getMixinNodeTypes()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->getMixinNodeTypes());
    }

    /**
     * {@inheritDoc}
     */
    public function createNodeTypeTemplate($ntd = NULL)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createNodeTypeTemplate($ntd));
    }

    /**
     * {@inheritDoc}
     */
    public function createNodeDefinitionTemplate()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createNodeDefinitionTemplate());
    }

    /**
     * {@inheritDoc}
     */
    public function createPropertyDefinitionTemplate()
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->createPropertyDefinitionTemplate());
    }

    /**
     * {@inheritDoc}
     */
    public function registerNodeType(\PHPCR\NodeType\NodeTypeDefinitionInterface$ntd, $allowUpdate)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->registerNodeType($ntd, $allowUpdate));
    }

    /**
     * {@inheritDoc}
     */
    public function registerNodeTypes(array $definitions, $allowUpdate)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->registerNodeTypes($definitions, $allowUpdate));
    }

    /**
     * {@inheritDoc}
     */
    public function registerNodeTypesCnd($cnd, $allowUpdate)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->registerNodeTypesCnd($cnd, $allowUpdate));
    }

    /**
     * {@inheritDoc}
     */
    public function unregisterNodeType($name)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->unregisterNodeType($name));
    }

    /**
     * {@inheritDoc}
     */
    public function unregisterNodeTypes(array $names)
    {
        return $this->decoratorFactory->decorate(__METHOD__, $this->component->unregisterNodeTypes($names));
    }

    public function getIterator()
    {
        throw new \Exception("Iterators not supported on decorated objects (yet)");
    }

}