<?php

// autogenerated: Wed, 10 Sep 2014 09:56:22 +0200

namespace Sulu\Component\PhpcrDecorator\PHPCR\Query\QOM

class QueryObjectModelFactory implements \PHPCR\Query\QOM\QueryObjectModelFactoryInterface
{
    /**
     * {@inheritDoc}
     */
    public function createQuery(SourceInterface $source,
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->createQuery($source $constraint $orderings $columns))
    }

    /**
     * {@inheritDoc}
     */
    public function selector($selectorName, $nodeTypeName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->selector($selectorName $nodeTypeName))
    }

    /**
     * {@inheritDoc}
     */
    public function join(SourceInterface $left, SourceInterface $right,
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->join($left $right $joinType $joinCondition))
    }

    /**
     * {@inheritDoc}
     */
    public function equiJoinCondition($selector1Name, $property1Name, $selector2Name, $property2Name)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->equiJoinCondition($selector1Name $property1Name $selector2Name $property2Name))
    }

    /**
     * {@inheritDoc}
     */
    public function sameNodeJoinCondition($selector1Name, $selector2Name, $selector2Path = null)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->sameNodeJoinCondition($selector1Name $selector2Name $selector2Path))
    }

    /**
     * {@inheritDoc}
     */
    public function childNodeJoinCondition($childSelectorName, $parentSelectorName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->childNodeJoinCondition($childSelectorName $parentSelectorName))
    }

    /**
     * {@inheritDoc}
     */
    public function descendantNodeJoinCondition($descendantSelectorName, $ancestorSelectorName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->descendantNodeJoinCondition($descendantSelectorName $ancestorSelectorName))
    }

    /**
     * {@inheritDoc}
     */
    public function andConstraint(ConstraintInterface $constraint1,
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->andConstraint($constraint1 $constraint2))
    }

    /**
     * {@inheritDoc}
     */
    public function orConstraint(ConstraintInterface $constraint1,
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->orConstraint($constraint1 $constraint2))
    }

    /**
     * {@inheritDoc}
     */
    public function notConstraint(ConstraintInterface $constraint)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->notConstraint($constraint))
    }

    /**
     * {@inheritDoc}
     */
    public function comparison(DynamicOperandInterface $operand1, $operator,
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->comparison($operand1 $operator $operand2))
    }

    /**
     * {@inheritDoc}
     */
    public function propertyExistence($selectorName, $propertyName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->propertyExistence($selectorName $propertyName))
    }

    /**
     * {@inheritDoc}
     */
    public function fullTextSearch($selectorName, $propertyName, $fullTextSearchExpression)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->fullTextSearch($selectorName $propertyName $fullTextSearchExpression))
    }

    /**
     * {@inheritDoc}
     */
    public function sameNode($selectorName, $path)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->sameNode($selectorName $path))
    }

    /**
     * {@inheritDoc}
     */
    public function childNode($selectorName, $path)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->childNode($selectorName $path))
    }

    /**
     * {@inheritDoc}
     */
    public function descendantNode($selectorName, $path)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->descendantNode($selectorName $path))
    }

    /**
     * {@inheritDoc}
     */
    public function propertyValue($selectorName, $propertyName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->propertyValue($selectorName $propertyName))
    }

    /**
     * {@inheritDoc}
     */
    public function length(PropertyValueInterface $propertyValue)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->length($propertyValue))
    }

    /**
     * {@inheritDoc}
     */
    public function nodeName($selectorName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->nodeName($selectorName))
    }

    /**
     * {@inheritDoc}
     */
    public function nodeLocalName($selectorName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->nodeLocalName($selectorName))
    }

    /**
     * {@inheritDoc}
     */
    public function fullTextSearchScore($selectorName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->fullTextSearchScore($selectorName))
    }

    /**
     * {@inheritDoc}
     */
    public function lowerCase(DynamicOperandInterface $operand)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->lowerCase($operand))
    }

    /**
     * {@inheritDoc}
     */
    public function upperCase(DynamicOperandInterface $operand)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->upperCase($operand))
    }

    /**
     * {@inheritDoc}
     */
    public function bindVariable($bindVariableName)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->bindVariable($bindVariableName))
    }

    /**
     * {@inheritDoc}
     */
    public function literal($literalValue)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->literal($literalValue))
    }

    /**
     * {@inheritDoc}
     */
    public function ascending(DynamicOperandInterface $operand)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->ascending($operand))
    }

    /**
     * {@inheritDoc}
     */
    public function descending(DynamicOperandInterface $operand)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->descending($operand))
    }

    /**
     * {@inheritDoc}
     */
    public function column($selectorName, $propertyName = null, $columnName = null)
    {
        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->column($selectorName $propertyName $columnName))
    }

}