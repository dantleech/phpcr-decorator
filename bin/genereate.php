<?php

use Symfony\Component\Finder\Finder;
use Symfony\Component\Filesystem\Filesystem;

require_once(__DIR__ . '/../vendor/autoload.php');

$phpcrDir = __DIR__ . '/../vendor/phpcr/phpcr/src';

$excludePatterns = array('{.*Test.*}');

$finder = new Finder();
$finder->name('*.php')->files()->in($phpcrDir);

foreach ($finder as $file) {
    $res = fopen($file, 'r');
    $class = $namespace = null;

    while ($line = fgets($res)) {
        if (preg_match('{^namespace ([^\s]+?);$}', $line, $matches)) {
            $namespace = $matches[1];
        }

        if (preg_match('{^interface ([^\s]+)}', $line, $matches)) {
            $class = $matches[1];
        }

        if ($class && $namespace) {
            break;
        }
    }

    if (!$class || !$namespace) {
        continue;
    }

    $fqn = $namespace . "\\" . $class;

    $reflection = new \ReflectionClass($fqn);

    generate_wrapped($reflection);
    fclose($res);
}

function writeln($mess)
{
    echo $mess . "\n";
}

function generate_wrapped(\ReflectionClass $refl)
{
    $fs = new Filesystem();
    $decoratedNameFqcn = preg_replace('{(.*)Interface}', '\1', $refl->name);
    $decoratedPath = str_replace('vendor/phpcr/phpcr/src', 'lib', $refl->getFileName());
    $decoratedPath = str_replace('Interface', '', $decoratedPath);

    $classCode = generate_class($refl, $decoratedNameFqcn);

    if (!file_exists(dirname($decoratedPath))) {
        $fs->mkdir(dirname($decoratedPath));
    }

    if (file_exists($decoratedPath)) {
        $fs->remove($decoratedPath);
    }

    file_put_contents($decoratedPath, $classCode);
}

function generate_class(\ReflectionClass $refl, $fqcn)
{
    preg_match('{^(.*?)\\\([^\\\]+)$}', $fqcn, $matches);

    if (!$matches) {
        throw new \Exception('Could not determine class and namespace');
    }
    $className = $matches[2];
    $namespace = $matches[1];

    $t = array();
    $t[] = '<?php';
    $t[] = '';
    $t[] = '// autogenerated: ' . date('r');
    $t[] = '';
    $t[] = 'namespace Sulu\Component\PhpcrDecorator\\' . $namespace;
    $t[] = '';
    $t[] = 'class ' . $className . ' implements \\' . $refl->name;
    $t[] = '{';

    foreach ($refl->getMethods() as $method) {
        $lineNo = $method->getStartLine();
        if (!file_exists($method->getFileName())) {
            continue;
        }
        $fileContents = file_get_contents($method->getFileName());
        $lines = explode("\n", $fileContents);
        $lines = array_slice($lines, $lineNo -1, 1);
        $methodLine = str_replace(';', '', current($lines));

        unset($fileContents, $lines);

        $params = $method->getParameters();
        $args = array();
        foreach ($params as $param) {
            $args[] = '$' . $param->name;
        }
        $args = implode(' ', $args);

        $t[] = '    /**';
        $t[] = '     * {@inheritDoc}';
        $t[] = '     */';
        $t[] = $methodLine;
        $t[] = '    {';
        $t[] = sprintf('        return $this->getDecorator()->decorate(__METHOD__, $this->__component()->%s(%s))',
            $method->name,
            $args
        );
        $t[] = '    }';
        $t[] = '';
    }

    $t[] = '}';

    $template = implode("\n", $t);

    return $template;
}
